openapi: 3.0.0
# Added by API Auto Mocking Plugin
servers:
# Added by API Auto Mocking Plugin
  - description: PathofExile Official Site
    url: https://www.pathofexile.com
  - description: PathofExile Official Site Russian
    url: https://ru.pathofexile.com
  - description: Garena Taiwan Site
    url: https://web.poe.garena.tw
  - description: Tencent China Site
    url: https://poe.game.qq.com
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/Chuanhsing/poe/1.0.0
info:
  description: |
    This is a sample PathofExile API.
    You can get new API updates from https://www.pathofexile.com/forum/view-forum/674 and
    https://www.pathofexile.com/developer/docs/
  version: "1.0.0"
  title: PathofExile API
  contact:
    url: 'https://github.com/Chuanhsing/poe-api/'
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: POESESSID  # cookie name
      description: Priavte mode account need session to get information
  schemas:
    AccountName:
      type: string
      example: Chris
    AccessToken:
      type: string
      description: access token from OAuth
      example: 0123456789012345678901234567890123456789
    UserAgent:
      type: string
      description: |
        requested by ggg https://www.pathofexile.com/forum/view-thread/3019033/page/1#p23790007
      default: "OAuth mypoeapp/1.0.0 (contact: mypoeapp@gmail.com)"
    Realms:
      description: |
        The realm of the leagues
      type: string
      enum:
        - pc
        - xbox
        - sony
      default: pc
    LeagueNames:
      type: string
      enum:
        - Standard
        - Hardcore
        - Expedition
        - Hardcore Expedition
        - SSF Standard
        - SSF Hardcore
        - SSF Expedition
        - SSF Expedition HC
    League:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/LeagueNames'
        realm:
          $ref: '#/components/schemas/Realms'
        description:
          type: string
          example: The default game mode
        registerAt:
          type: string
          example: "2019-09-06T19:00:00Z"
        url:
          type: string
          example: https://www.pathofexile.com/forum/view-thread/71278
        startAt:
          type: string
          example: "2013-01-23T21:00:00Z"
        endAt:
          type: string
        delveEvent:
          type: boolean
        rules:
          type: array
          items:
            $ref: "#/components/schemas/LeagueRule"
    LeagueRule:
      type: object
      properties:
        id:
          type: string
          example: Hardcore
        name:
          type: string
          example: Hardcore
        description:
          type: string
          example: A character killed in Hardcore is moved to its parent league.
    Characters:
      type: array
      items:
        type: object
        properties:
          name:
            type: string
          league:
            $ref: "#/components/schemas/LeagueNames"
          classId:
            type: integer
            example: 3
          ascendancyClass:
            type: integer
            example: 3
          class:
            type: string
            example: Necromancer
          level:
            type: integer
            example: 92
          experience:
            type: integer
            example: 2273293803
    PublicStashTab:
      type: object
      properties:
        next_change_id:
          type: string
        stashes:
          type: array
          items:
            $ref: '#/components/schemas/Stash'
    Stash:
      type: object
      properties:
        accountName:
          $ref: "#/components/schemas/AccountName"
        lastCharacterName:
          type: string
        id:
          type: string
        stash:
          type: string
        items:
          $ref: "#/components/schemas/Items"
        public:
          type: boolean
    StashItems:
      type: object
      properties:
        numTabs:
          type: integer
        items:
          $ref: "#/components/schemas/Items"
    Guild:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        tag:
          type: string
    PointTransaction:
      type: object
      properties:
        total:
          type: integer
        entries:
          type: array
          items:
            type: object
    StashHistory:
      type: object
      properties:
        total:
          type: integer
        entries:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              time:
                type: integer
              league:
                type: string
              item:
                type: string
              action:
                type: string
              account:
                type: object
                properties:
                  name:
                    type: string
                  realm:
                    $ref: '#/components/schemas/Realms'
                  guild:
                    $ref: '#/components/schemas/Guild'
    Season:
      type: object
      properties:
        id:
          type: string
          example: Race Season One
        startAt:
          type: string
          example: "2013-02-20T05:47:21Z"
        endAt:
          type: string
          example: "2013-02-20T05:47:21Z"
        htmlId:
          type: string
          example: race-season-one
        htmlContent:
          type: string
          nullable: true
        rewards:
          type: array
          items:
            type: object
            properties:
              requiredPoints:
                type: integer
              item:
                $ref: "#/components/schemas/Item"
              itemOffsetX:
                type: integer
              itemOffsetY:
                type: integer
    Ladder:
      type: object
      properties:
        rank:
          type: integer
        dead:
          type: boolean
        online:
          type: boolean
        character:
          type: object
          properties:
            id:
              type: string
            name:
              type: string
            level:
              type: integer
            class:
              type: string
            time:
              type: integer
            score:
              type: integer
            experience:
              type: integer
        account:
          type: object
          properties:
            name:
              $ref: '#/components/schemas/AccountName'
            realm:
              $ref: '#/components/schemas/Realms'
            challenges:
              type: object
              properties:
                total:
                  type: integer
    Ladders:
      type: object
      properties:
        total:
          type: integer
        entrie:
          type: array
          items:
            type: array
            items:
              $ref: "#/components/schemas/Ladder"
    Items:
      type: array
      items:
        $ref: "#/components/schemas/Item"
    Item:
      type: object
      properties:
        verified: 
          type: boolean
          description: true if the item has not changed since it was linked.
        w:
          type: number
          description: Width of the item in inventory tiles.
        h:
          type: number
          description: Height of the item in inventory tiles.
        ilvl:
          type: number
          description: item level
        icon:
          type: string
          description: url to the image of the item
        league:
          type: string
          description: league identifier
        id:
          type: string
          format: uuid
        elder:
          type: boolean
          description: true if the item can have elder mods (elder background).
        shaper:
          type: boolean
          description: true if the item can have shaper mods (shaper background).
        fractured:
          type: boolean
          description: true if the item can have fractured mods (fractured background).
        sockets:
          type: object
          properties:
            group:
              type: number
              description: Every socket that has the same group is linked.
            attr:
              description: attributes e.g. dex, int, strength
              anyOf:
                - type: string
                  enum: 
                    - D
                    - I
                    - S
                  description: >
                    Possible values:
                      * `D` - dexterity
                      * `I` - intelligence
                      * `S` - strength
                - type: boolean
                  description: abyss sockets don't have attributes
            sColour:
              type: string
              enum:
                - B
                - G
                - R
                - W
                - A
              description: >
                Possible values:
                  - `B` - blue
                  - `G` - green
                  - `R` - red
                  - `W` - white
                  - `A` - abyss
        name:
          type: string
          description: unique name of the item
        typeLine:
          type: string
          description: name of the baseitem (+prefix/suffix if existing)
        identified:
          type: boolean
          description: true if the item is identified
        corrupted:
          type: boolean
          description: true if the item is corrupted
        properties:
          type: array
          items:
            $ref: "#/components/schemas/ItemLineContent"
        utilityMods:
          type: array
          description: \"Implicit\" mods for flasks.
          items:
            type: string
        explicitMods:
          type: array
          items:
            type: string
        craftedMods:
          type: array
          items:
            type: string
          description: master crafted mods
        enchantMods:
          type: array
          items:
            type: string
          description: enchantments
        fracturedMods:
          type: array
          items:
            type: string
          description: fractured mods
        flavourText:
          type: array
          items:
            type: string
          description: Array of lines of the flavour text of e.g. unique items.
        descrText:
          type: string
          description: description
        secDescrText:
          type: string
          description: secondary description
        frameType:
          type: number
          enum:
            - 0
            - 1
            - 2
            - 3
            - 4
          description: > 
            Frame "color" of the item depending on rarity, item type (e.g. gem) etc.

            Possible values with examples:
              * `0` - normal items
              * `1` - magic items
              * `2` - rare items
              * `3` - unique items
              * `4` - gems
        category:
          description: > 
            Should only contain one property which is the "superclass" and an array
            where the only member is the "subclass"
          type: object
          additionalProperties:
            type: array
            items:
              type: string
        x:
          type: number
          description: "X coordinate in the specified frame."
        y:
          type: number
          description: "Y coordinate in the specified frame."
        inventoryId:
          type: string
          description: >
            Id of the slot where this item is located. `StashX` for stash number `X`.
            `BodyArmour`, `Flask` etc for actual inventory slots.
        isRelic:
          type: boolean
          description: true if the item is a relic item (introduced in Legacy league).
        socketetedItems:
          type: array
          items:
            $ref: "#/components/schemas/Item"
          description: >
            List of items that are socketed into the sockets of the item. The 
            schema has an additional property __socket__ which contains the 
            socket index.
        socket:
          type: number
          description: Socket index in the parent item in which this item is socketed.
        colour:
          type: string
          description: >
            gem colour (originates from attribute requirement):
              * `D` - green
              * `I` - blue
              * `S` - red 
              * `G` - white
          enum:
            - D
            - I
            - S
            - G
    ItemLineContent:
      type: object
      properties:
        name:
          type: string
        values:
          type: array
          description: >
            Tuple where the first value is the display string.
            The second value describes how the value should be displayed:
              * 0 - white (simple) text
              * 1 - blue (augmented) text
              * 4 - red (fire damage) text
              * 5 - blue (cold damage) text
              * 6 - yellow (lightning damage) text
              * 7 - red-violet (chaos damage) text
          items:
            type: array
            minItems: 2
            maxItems: 2
            items:
              anyOf:
                - type: string
                - type: number
        displayMode:
          type: number
          description: >
            Possible values:
              * 0 - `name` should be displayed as \`${name}: ${values.join(', ')}\` if 
                  values.length > 0 otherwise just '${name}'
              * 1 - `name` should be displayed as \`${values[0]} ${name}\`
              * 2 - `name__ should be display as \`${progressBar(values[0])} ${values[0]}\`
                    i.e. `name` is not displayed
              * 3 - `name` field contains placeholders for the values in
                      the format of `%\d`. The number nth value in `values` (0-based)
          enum:
            - 0
            - 1
            - 2
            - 3
        type:
          type: number
          description: The order in which the lines should be displayed
    ShowCasePins:
      type: object
      properties:
        total:
          type: integer
        account:
          type: string
        entries:
          type: array
          items:
            $ref: '#/components/schemas/ShowCasePin'
    ShowCasePin:
      type: object
      properties:
        character_id:
          type: string
        foreign_id:
          type: string
        position:
          type: integer
        type:
          type: string
        label:
          type: string
        id:
          type: string
        icon:
          type: string
    AccountAvatars:
      type: object
      properties:
        total:
          type: integer
          example: 69
        collection:
          type: array
          items:
            $ref: '#/components/schemas/AccountAvatar'
    AccountAvatar:
      type: object
      properties:
        custom:
          type: boolean
        avatar_id:
          type: integer
          example: 69
        image:
          type: string
          example: https://www.pathofexile.com/gen/image/WzAsMSx7ImlkIjo2OSwic2l6ZSI6ImF2YXRhciJ9XQ/3121a0cc75/Path_of_Exile_Gallery_Image.jpg
        current:
          type: boolean
    Stream:
      type: object
      properties:
        name:
          type: string
          example: Mathil1
        image:
          type: string
          example: https://static-cdn.jtvnw.net/previews-ttv/live_user_mathil1-320x180.jpg
        status:
          type: string
          example: Mathil - Crit bleed/rupture Puncture Deadeye, crafting/figuring it out
        viewers:
          type: integer
          example: 4025
        id:
          type: string
          example: 25575995
        url:
          type: string
          example: https://twitch.tv/mathil1
    Profile:
      type: object
      properties:
        uuid:
          type: string
          nullable: true
        name:
          $ref: '#/components/schemas/AccountName'
        realm:
          $ref: '#/components/schemas/Realms'
        guild:
          type: object
          properties:
            name:
              type: string
    Specials:
      type: object
      properties:
        total:
          type: integer
        entries:
          type: array
          items:
            $ref: '#/components/schemas/Microtransaction'
    Microtransaction:
      type: object
      properties:
        id:
          type: integer
        startAt:
          type: string
        endAt:
          type: string
        imageUrl:
          type: string
        url:
          type: string
        description:
          type: string
        specialType:
          type: string
        cost:
          type: integer
        countdownSpecial:
          type: boolean
        countdownImage:
          type: string
        priority:
          type: integer
        platform:
          type: string
        microtransaction:
          type: object
          properties:
            id:
              type: string
            name:
              type: string
            description:
              type: string
            cost:
              type: integer
            guild:
              type: boolean
        category:
          type: boolean
    TradeDataLeagues:
      type: object
      properties:
        result:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                example: Standard
              text:
                type: string
                example: Standard
    TradeDataItems:
      type: object
      properties:
        result:
          type: array
          items:
            type: object
            properties:
              label:
                type: string
                example: Accessories
              entries:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                      example: Ahkeli's Meadow
                    type:
                      type: string
                      example: Ruby Ring
                    text:
                      type: string
                      example: Ahkeli's Meadow Ruby Ring
                    flags:
                      type: object
                      properties:
                        unique:
                          type: boolean
                        prophecy:
                          type: boolean
                          example: false
    TradeDataStats:
      type: object
      properties:
        result:
          type: array
          items:
            type: object
            properties:
              label:
                type: string
                example: Pseudo
              entries:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      example: pseudo.pseudo_total_cold_resistance
                    text:
                      type: string
                      example: +#% total to Cold Resistance
                    type:
                      type: string
                      example: pseudo
    TradeDataStatic:
      type: object
      properties:
        result:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                example: Currency
              label:
                type: string
                example: Currency
              entries:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      example: alt
                    text:
                      type: string
                      example: Orb of Alteration
                    image:
                      type: string
                      example: /image/Art/2DItems/Currency/CurrencyRerollMagic.png?v=6d9520174f6643e502da336e76b730d3
    TradeChangeIDS:
      type: object
      properties:
        psapi:
          type: string
          example: "1227105106-1231696377-1189586900-1330788009-1278983122"
        forum:
          type: string
          example: "23702876"
    SearchSource:
      type: object
      properties:
        query:
          type: object
          properties:
            filters:
              type: object
              description: not required
              properties:
                trade_filters:
                  type: object
                  properties:
                    disabled:
                      type: boolean
                      enum: [false, true]
                    filters:
                      type: object
                      properties:
                        price:
                          type: object
                          properties:
                            min:
                              type: integer
                              example: 1
                            max:
                              type: integer
                              example: 30
            status:
              type: object
              description: not required
              properties:
                option:
                  type: string
                  enum: [online,any]
                  default: online
            stats:
              type: array
              description: not required
              items:
                $ref: "#/components/schemas/SearchSourceStats"
            name:
              type: string
              example: Tabula Rasa
            type:
              type: string
              example: Simple Robe
        sort:
          type: object
          description: not required
          properties:
            price:
              type: string
              example: asc
              default: asc
    SearchSourceStats:
      type: object
      properties:
        type:
          type: string
          example: and
        filters:
          type: array
          items:
            type: string
          example: []
    SearchResult:
      type: object
      properties:
        id:
          type: string
          example: Wqn2LKFm
        result:
          type: array
          items:
            type: string
          example: [c593ccc98580e892eb0745048a8378927b452070e91da03139a00d450eca7477,e1105792ac87113b20487d7cb2d5b9fd43f40b3bdd8a55780acbaaad513c9b65]
        total:
          type: integer
          example: 1
paths:
  /oauth/authorize:
    get:
      tags:
        - OAuth
      description: Generate an authorization URL and allow the user to navigate to it
      parameters:
        - name: client_id
          in: query
          description: is your registered application's client id.
          schema:
            type: string
            example: example
        - name: response_type
          in: query
          description: is always `code`.
          schema:
            type: string
            enum: [code]
            default: code
        - name: scope
          in: query
          description: is a space-separated list of requested scopes.
          schema:
            type: string
            example: account:profile
        - name: state
          in: query
          description: is a code or hash that you generate to validate the request.
          schema:
            type: string
            example: 10ceb8104963e91e47a95f4138448ecf
        - name: redirect_uri
          in: query
          description: is the URL that you want the result of the authorization request to be sent to.
          schema:
            type: string
            example: https://example.com
        - name: prompt
          in: query
          description: |
            can either be `consent` (the default) or `none`:
            * `consent` will ask the user for consent after making sure they're logged in.
            * `none` will attempt to re-authorize the request with existing consent. If this is not possible then an error response is immediately returned without the user being prompted.
          schema:
            type: string
            example: consent
            default: consent
      responses:
        '200':
          description: OK
          content:
            application/json: {}
  /oauth/token:
    post:
      tags:
        - OAuth
      description: use client_id and client_secret to get oauth token
      parameters:
        - name: grant_type
          in: query
          required: true
          schema:
            type: string
            enum: [authorization_code, client_credentials, refresh_token]
        - name: code
          description: client code, used when grant_type equal client_credentials
          in: query
          required: false
          schema:
            type: string
        - name: refresh_token
          description: used when grant_type equal refresh_token
          in: query
          required: false
          schema:
            type: string
        - name: client_id
          in: query
          required: true
          schema:
            type: string
        - name: client_secret
          in: query
          required: true
          schema:
            type: string
        - name: redirect_uri
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    $ref: '#/components/schemas/AccessToken'
                  expires_in:
                    type: integer
                    example: 2419200
                  token_type:
                    type: string
                    example: bearer
                  scope:
                    type: string
                    example: service:psapi
  /oauth/token/revoke:
    post:
      tags:
        - OAuth
      responses:
        '200':
          description: OK
          content:
            application/json: {}
  /oauth/token/introspect:
    post:
      tags:
        - OAuth
      responses:
        '200':
          description: OK
          content:
            application/json: {}
  /character-window/get-characters:
    get:
      tags:
        - Characters
      security:
        - cookieAuth: []
      summary: Get Characters
      parameters:
        - name: User-Agent
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/UserAgent'
        - name: accountName
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/AccountName'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Characters'
  /character-window/get-items:
    get:
      tags:
        - Characters
      security:
        - cookieAuth: []
      summary: Get Equipment Items
      parameters:
        - name: User-Agent
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/UserAgent'
        - name: accountName
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/AccountName'
        - name: character
          in: query
          required: true
          schema:
            type: string
            example: Morrigan
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Items"
  /character-window/get-passive-skills:
    get:
      tags:
        - Characters
      security:
        - cookieAuth: []
      summary: Get Passive Skills
      parameters:
        - name: User-Agent
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/UserAgent'
        - name: accountName
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/AccountName'
        - name: character
          in: query
          required: true
          schema:
            type: string
            example: Morrigan
        - name: reqData
          in: query
          required: true
          schema:
            type: number
            enum: [0, 1]
      responses:
        '200':
          description: OK
          content:
            application/json: {}
  /character-window/get-stash-items:
    get:
      tags:
        - Account
      security:
        - cookieAuth: []
      summary: Get Stash Items
      parameters:
        - name: User-Agent
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/UserAgent'
        - name: league
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/LeagueNames'
        - name: realm
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/Realms'
        - name: accountName
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/AccountName'
        - name: tabs
          in: query
          description: '{0,1} 1 to shows tabs name, position, colors'
          required: true
          schema:
            type: number
            enum: [0, 1]
        - name: tabIndex
          in: query
          description: '{0,...,N}'
          required: true
          schema:
            type: number
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StashItems'
  /character-window/get-mtx-stash-items:
    get:
      tags:
        - Account
      security:
        - cookieAuth: []
      summary: Get MTXs
      parameters:
        - name: User-Agent
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/UserAgent'
        - name: realm
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/Realms'
        - name: sortOrder
          in: query
          required: true
          schema:
            type: string
            enum: [category, theme]
      responses:
        '200':
          description: OK
          content:
            application/json: {}
  /character-window/get-account-name-by-character:
    get:
      tags:
        - Account
      security:
        - cookieAuth: []
      summary: Get Account Name
      parameters:
        - name: User-Agent
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/UserAgent'
        - name: character
          in: query
          required: true
          schema:
            type: string
          example: QuillHitman
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  accountName:
                    $ref: '#/components/schemas/AccountName'
  /api/account-avatar:
    get:
      tags:
        - Account
      security:
        - cookieAuth: []
      summary: Get Account Acatar
      parameters:
        - name: User-Agent
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/UserAgent'
        - name: page
          in: query
          required: true
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: perPage
          in: query
          required: true
          schema:
            type: integer
            default: 16
            maximum: 16
        - name: custom
          description: true only custom avatars (supporter avatars) of the account will be fetched
          in: query
          required: true
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountAvatars'
  /api/account/showcase-pins:
    get:
      tags:
        - Account
      security:
        - cookieAuth: []
      summary: Get Showcase Pins
      parameters:
        - name: User-Agent
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/UserAgent'
        - name: offset
          in: query
          required: true
          schema:
            type: integer
        - name: limit
          in: query
          required: true
          schema:
            type: integer
        - name: realm
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/Realms'
        - name: account
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShowCasePins'
  /api/profile:
    get:
      tags:
        - Account
      security:
        - cookieAuth: []
      parameters:
        - name: User-Agent
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/UserAgent'
        - name: access_token
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/AccessToken'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
  /account/view-profile/{accountName}/stashes:
    get:
      summary: unique stash
      description: parse stashId from html and request /account/view-stash/{accountName}/{stashId}
      tags:
        - Account
      security:
        - cookieAuth: []
      parameters:
        - name: accountName
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/AccountName'
      responses:
        '200':
          description: OK
          content:
            text/html: {}
  /account/view-stash/{accountName}/{stashId}:
    get:
      summary: unique stash
      description: parse items from html
      tags:
        - Account
      security:
        - cookieAuth: []
      parameters:
        - name: accountName
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/AccountName'
        - name: stashId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            text/html: {}
  /api/guild:
    get:
      summary: Get Guild
      tags:
        - Guild
      security:
        - cookieAuth: []
      parameters:
        - name: User-Agent
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/UserAgent'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Guild"
  /api/account/guild/point-transactions:
    get:
      tags:
        - Guild
      summary: Get Account Point Transactions
      security:
        - cookieAuth: []
      parameters:
        - name: User-Agent
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/UserAgent'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PointTransaction'
  /api/guild/point-transactions:
    get:
      tags:
        - Guild
      summary: Get Point Transactions
      security:
        - cookieAuth: []
      parameters:
        - name: User-Agent
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/UserAgent'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PointTransaction'
  /api/guild/{guildid}/stash/history:
    get:
      tags:
        - Guild
      summary: List guild stash history
      security:
        - cookieAuth: []
      parameters:
        - name: guildid
          in: path
          required: true
          schema:
            type: string
        - name: from
          in: query
          required: false
          description: unix timestamp
          schema:
            type: string
        - name: fromid
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StashHistory'
  /character-window/get-guild-stash-items:
    get:
      tags:
        - Guild
      security:
        - cookieAuth: []
      summary: Get Guild Stash Items
      parameters:
        - name: User-Agent
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/UserAgent'
        - name: league
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/LeagueNames'
        - name: realm
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/Realms'
        - name: accountName
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/AccountName'
        - name: tabs
          in: query
          description: '{0,1} 1 to shows tabs name, position, colors'
          required: true
          schema:
            type: number
            enum: [0, 1]
        - name: tabIndex
          in: query
          description: '{0,...,N}'
          required: true
          schema:
            type: number
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StashItems'
  /api/seasons:
    get:
      tags:
        - Seasons
      summary: Get Seasons
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Season"
  /api/season-player-history:
    get:
      tags:
        - Seasons
      security:
        - cookieAuth: []
      summary: Get Season Player History
      parameters:
        - name: User-Agent
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/UserAgent'
        - name: page
          in: query
          required: true
          schema:
            type: integer
        - name: perPage
          in: query
          required: true
          schema:
            type: integer
        - name: seasonId
          in: query
          required: true
          schema:
            type: string
            default: Medallion Race Season
        - name: realm
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/Realms'
        - name: id
          description: accountName
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/AccountName'
      responses:
        '200':
          description: OK
          content:
            application/json: {}
  /api/leagues:
    get:
      tags:
        - Leagues
      summary: Get a list of current and past leagues.
      description: |
        * https://www.pathofexile.com/developer/docs/api-resource-leagues
      parameters:
        - name: type
          in: query
          description: >
            Possible values:
              * `main` - retrieves main leagues (ones from the character screen)
              * `event` - retrieves event leagues
              * `season` - retrieves leagues in a particular season
          schema:
            type: string
            enum: [main, event, season]
        - name: realm
          in: query
          description: |
            The realm of the leagues
          schema:
            $ref: '#/components/schemas/Realms'
        - name: season
          in: query
          description: |
            A particular season id. Required when type=season.
          schema:
            type: string
        - name: compat
          in: query
          description: |
            Possible values:
              * `0` - Displays the full info for leagues retrieved (will only retrieve a maximum of 50 leagues) (the default)
              * `1` - Display compact info for leagues retrieved (will retrieve up to 230 leagues)
          schema:
            type: number
            enum: [0, 1]
        - name: limit
          in: query
          description: |
            This specifies the number of league entries to include. By default this is the maximum, which depends on the setting above.
          schema:
            type: number
        - name: offset
          in: query
          description: |
            This specifies the offset to the first league entry to include.
          schema:
            type: number
            default: 0
        - name: callback
          in: query
          description: |
            jsonp callback
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/League"
  /api/leagues/{id}:
    get:
      tags:
        - Leagues
      summary: Get a single league by id.
      parameters:
        - name: id
          in: path
          description: |
            The id (name) of the league.
          required: true
          schema:
            $ref: '#/components/schemas/LeagueNames'
        - name: realm
          in: query
          description: |
            The realm of the leagues
          schema:
            $ref: '#/components/schemas/Realms'
        - name: limit
          in: query
          description: |
            When including the ladder with ladder=1, this specifies the number of ladder entries to include.
          schema:
            type: number
            default: 20
            maximum: 200
        - name: offset
          in: query
          description: |
            When including the ladder with ladder=1, this specifies the offset to the first ladder entry to include.
          schema:
            type: number
            default: 0
        - name: track
          in: query
          description: |
            When including the ladder with ladder=1, this setting adds unique IDs for each character returned. These can be used when name conflicts occur.
          schema:
            type: number
        - name: accountName
          in: query
          description: |
            League only: Filters by account name within the first 15000 results.
          schema:
            $ref: '#/components/schemas/AccountName'
        - name: difficulty
          in: query
          description: |
            Labyrinth only: Standard (1), Cruel (2), or Merciless (3)
          schema:
            type: string
            enum: [Standard, Cruel, Merciless]
        - name: start
          in: query
          description: |
            Labyrinth only: Timestamp of the ladder you want.
          schema:
            type: string
        - name: sort
          in: query
          schema:
            type: string
            enum: [depth, depthsolo]
        - name: callback
          in: query
          description: |
            jsonp callback
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/League"
  /api/league-rules:
    get:
      tags:
        - Leagues
      summary: Get a list of all possible league rules.
      description: |
        https://www.pathofexile.com/developer/docs/api-resource-league-rules
      parameters:
        - name: callback
          in: query
          description: |
            jsonp callback
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/LeagueRule"
  /api/league-rules/{id}:
    get:
      tags:
        - Leagues
      summary: Get a single league rule by id.
      description: |
        https://www.pathofexile.com/developer/docs/api-resource-league-rules
      parameters:
        - name: id
          in: path
          description: The rule id.
          required: true
          schema:
            type: number
        - name: callback
          in: query
          description: |
            jsonp callback
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LeagueRule"
  /api/private-league-member/{id}:
    get:
      tags:
        - PrivateLeagues
      parameters:
        - name: id
          in: path
          description: private league without PL prefix
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json: {}
  /api/ladders/{id}:
    get:
      tags:
        - Ladder
      summary: Get a ladder by league id. There is a restriction in place on the last ladder entry you are able to retrieve which is set to 15000.
      description: >
        * https://www.pathofexile.com/developer/docs/api-resource-ladders
      parameters:
        - name: id
          in: path
          description: |
            The id (name) of the league for the ladder you want to retrieve.
          required: true
          schema:
            $ref: '#/components/schemas/LeagueNames'
        - name: limit
          in: query
          description: |
            Specifies the number of ladder entries to include.
          schema:
            type: number
            default: 20
            maximum: 200
        - name: offset
          in: query
          description: |
            Specifies the offset to the first ladder entry to include.
          schema:
            type: number
            default: 0
            maximum: 15000
        - name: type
          in: query
          description: |
            Specifies the type of ladder
          schema:
            type: string
            default: league
            enum: [league, pvp, labyrinth]
        - name: track
          in: query
          description: |
            Adds unique IDs for each character returned. These can be used when name conflicts occur. Default: true
          schema:
            type: string
        - name: accountName
          in: query
          description: |
            League only: Filters by account name within the first 15000 results.
          schema:
            $ref: '#/components/schemas/AccountName'
        - name: difficulty
          in: query
          description: |
            Labyrinth only: Standard (1), Cruel (2) or Merciless (3)
          schema:
            type: string
            enum: [Normal]
        - name: start
          in: query
          description: |
            Labyrinth only: Timestamp of the ladder you want.
          schema:
            type: string
        - name: callback
          in: query
          description: |
            jsonp callback
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ladders'
  /api/pvp-matches:
    get:
      tags:
        - PVP
      summary: Get a list of PvP matches.
      parameters:
        - name: type
          in: query
          required: true
          schema:
            type: string
            enum: [season]
        - name: seasonId
          in: query
          description: |
            Set this to get PvP matches for a particular season. Leave this unset to retrieve all upcoming PvP matches.
          schema:
            type: string
        - name: realm
          in: query
          description: |
            The realm to fetch PvP matches from
          schema:
            $ref: '#/components/schemas/Realms'
        - name: callback
          in: query
          description: |
            jsonp callback
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json: {}
  /api/public-stash-tabs:
    get:
      tags:
        - PublicStashTabs
      summary: Retrieves a list of stashes, accounts, and items as described above in the Introduction section.
      description: |
        * https://www.pathofexile.com/developer/docs/api-resource-public-stash-tabs
        * https://pathofexile.gamepedia.com/Public_stash_tab_API
        * API doesn't contain any historical data and always returns the current state of stash tabs.
      parameters:
        - name: User-Agent
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/UserAgent'
        - name: id
          in: query
          description: |
            The next change ID you recieved from previously fetching changes.
          schema:
            type: string
            default: 0
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicStashTab'
  /api/shop/microtransactions/specials:
    get:
      tags:
        - MTX
      summary: get today special deals
      parameters:
        - name: type
          in: query
          schema:
            type: string
            enum: [active]
        - name: limit
          in: query
          schema:
            type: number
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Specials'
  /api/streams:
    get:
      tags:
        - Streams
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  streams:
                    type: array
                    items:
                      $ref: '#/components/schemas/Stream'
  /api/trade/data/leagues:
    get:
      tags:
        - Trade
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TradeDataLeagues'
  /api/trade/data/items:
    get:
      tags:
        - Trade
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TradeDataItems'
  /api/trade/data/stats:
    get:
      tags:
        - Trade
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TradeDataStats'
  /api/trade/data/static:
    get:
      tags:
        - Trade
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TradeDataStatic'
  /api/trade/data/change-ids:
    get:
      tags:
        - Trade
      summary: trade last change ids
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TradeChangeIDS'
  /api/trade/search/{league}:
    post:
      tags:
        - Trade
      summary: trade search function
      parameters:
        - name: league
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/LeagueNames'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchSource'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResult'
  /api/trade/fetch/{items}:
    get:
      tags:
        - Trade
      summary: fetch items using search result
      parameters:
        - name: items
          in: path
          required: true
          description: Search Results in ,
          schema:
            type: string
          example: c593ccc98580e892eb0745048a8378927b452070e91da03139a00d450eca7477,e1105792ac87113b20487d7cb2d5b9fd43f40b3bdd8a55780acbaaad513c9b65
        - name: query
          in: query
          description: Search id
          schema:
            type: string
          example: Wqn2LKFm
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/Items'
  /api/trade/ignore:
    get:
      tags:
        - Trade
      summary: List ignored trade accounts
      security:
        - cookieAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                  pagination:
                    type: object
                    properties:
                      page:
                        type: integer
                        default: 1
                        minimum: 1
                      per_page:
                        type: integer
                        default: 50
                      total:
                        type: integer
  /api/trade/ignore/{account}:
    put:
      tags:
        - Trade
      summary: Ignore a trade account
      security:
        - cookieAuth: []
      parameters:
        - name: account
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
    delete:
      tags:
        - Trade
      summary: Unignore a trade account
      security:
        - cookieAuth: []
      parameters:
        - name: account
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json: {}
  /ladder/export-csv/league/{league}:
    get:
      description: 2000 per page
      tags:
        - Ladder
      parameters:
        - name: league
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/LeagueNames'
        - name: realm
          in: query
          required: true
          description: |
            The realm to fetch PvP matches from
          schema:
            $ref: '#/components/schemas/Realms'
        - name: index
          in: query
          required: true
          schema:
            type: integer
            minimum: 1
            maximum: 8
      responses:
        '200':
          description: OK
          content:
            text/csv: {}
